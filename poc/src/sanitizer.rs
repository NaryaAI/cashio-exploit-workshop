use anchor_lang::prelude::Pubkey;
use converter::SaberSwap;
use solana_program::{
    program_pack::Pack,
};
use spl_token::state::{Mint};
use stable_swap_client::state::{
    SwapInfo,
};
use sunburn::{client::LocalClientSync};

pub struct Sanitizer {
    pub bank: BankInfo,
}

pub struct BankInfo {
    pub cashio_mint: Pubkey,

    // Collateral
    pub saber_swap_info: Pubkey,
    pub cashio_collateral_wallet: Pubkey
} 

impl BankInfo {
    fn check(&self, env: &mut sunburn::Environment<LocalClientSync>) -> Result<bool, anyhow::Error> {
        let cashio_mint_account = env.get_account(self.cashio_mint)?;
        let cashio_mint = Mint::unpack(&cashio_mint_account.data)?;

        let cashio_collateral_wallet_account = env.get_account(self.cashio_collateral_wallet)?;
        let cashio_collateral_wallet = spl_token::state::Account::unpack(&cashio_collateral_wallet_account.data)?;

        let swap_info_account = env.get_account(self.saber_swap_info)?;
        let swap_info = SwapInfo::unpack(&swap_info_account.data)?;
        let pool_mint_account = env.get_account(swap_info.pool_mint)?;
        let pool_mint = Mint::unpack(&pool_mint_account.data)?;
        let token_a_account = env.get_account(swap_info.token_a.reserves)?;
        let token_a = spl_token::state::Account::unpack(&token_a_account.data)?;
        let token_b_account = env.get_account(swap_info.token_b.reserves)?;
        let token_b = spl_token::state::Account::unpack(&token_b_account.data)?;

        let saber_swap = SaberSwap {
            initial_amp_factor: swap_info.initial_amp_factor,
            target_amp_factor: swap_info.target_amp_factor,
            current_ts: swap_info.start_ramp_ts,
            start_ramp_ts: swap_info.start_ramp_ts,
            stop_ramp_ts: swap_info.stop_ramp_ts,
            lp_mint_supply: pool_mint.supply,
            token_a_reserve: token_a.amount,
            token_b_reserve: token_b.amount, 
        };

        // Check if the collateral's value (in $CASH) is not smaller than $CASH sent out
        Ok(
            saber_swap.calculate_virtual_price_of_pool_tokens(cashio_collateral_wallet.amount).unwrap()
                >= cashio_mint.supply
        )
    }
}

impl Sanitizer {
    pub fn check(&self, env: &mut sunburn::Environment<LocalClientSync>) -> Result<bool, anyhow::Error> {
        self.bank.check(env)
    }
}