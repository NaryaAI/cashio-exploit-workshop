use anchor_lang::AccountSerialize;
use arrow_sunny::{Arrow, ArrowMiner};
use cashio_poc::{AccountConfig, LocalEnv, LocalEnvBuilder};
use solana_program::pubkey::Pubkey;
use solana_program_test::tokio;
use solana_sdk::{signature::Keypair, signer::Signer};

struct FakeArrow {
    _dummy: Pubkey,
    arrow_addr: Keypair,
    arrow_data: Vec<u8>,
}

fn create_fake_arrow(token_mint: Pubkey) -> FakeArrow {
    let dummy = Keypair::new();
    let arrow_addr = Keypair::new();

    let vendor_miner = ArrowMiner {
        mint: token_mint,
        rewarder: dummy.pubkey(),
        quarry: dummy.pubkey(),
        miner: dummy.pubkey(),
        miner_vault: dummy.pubkey(),
        rewards_mint: dummy.pubkey(),
        mint_wrapper: dummy.pubkey(),
        claim_fee_token_account: dummy.pubkey(),
        vault_staked_token_account: dummy.pubkey(),
        vault_rewards_token_account: dummy.pubkey(),
        sunny_pool_rewards_fee_account: dummy.pubkey(),
    };

    let internal_miner = ArrowMiner {
        mint: dummy.pubkey(),
        rewarder: dummy.pubkey(),
        quarry: dummy.pubkey(),
        miner: dummy.pubkey(),
        miner_vault: dummy.pubkey(),
        rewards_mint: dummy.pubkey(),
        mint_wrapper: dummy.pubkey(),
        claim_fee_token_account: dummy.pubkey(),
        vault_staked_token_account: dummy.pubkey(),
        vault_rewards_token_account: dummy.pubkey(),
        sunny_pool_rewards_fee_account: dummy.pubkey(),
    };

    let arrow = Arrow {
        mint: token_mint,
        bump: 0,
        beneficiary: dummy.pubkey(),
        pool: dummy.pubkey(),
        vault: dummy.pubkey(),
        vendor_miner: vendor_miner,
        internal_miner: internal_miner,
    };

    let mut arrow_data = Vec::new();
    arrow.try_serialize(&mut arrow_data).unwrap();

    FakeArrow {
        _dummy: dummy.pubkey(),
        arrow_addr,
        arrow_data,
    }
}

#[tokio::main]
async fn main() -> Result<(), anyhow::Error> {
    // prepare mock environment
    let bankman_data = std::fs::read("cashio/target/deploy/bankman.so")?;
    let brrr_data = std::fs::read("cashio/target/deploy/brrr.so")?;
    let crate_token_data = std::fs::read("dep-programs/crate-token-0.6.0.so")?;
    let arrow_sunny_data = std::fs::read("dep-programs/arrow_sunny-0.3.1.so")?;

    let saber_authority = Keypair::new();
    let cashio_authority = Keypair::new();

    let saber_lp_mint = Keypair::new();
    let cashio_mint = Keypair::new();

    let fake_arrow = create_fake_arrow(saber_lp_mint.pubkey());

    let mut env = LocalEnvBuilder::new()
        .add_program(bankman::ID, bankman_data)
        .add_program(brrr::ID, brrr_data)
        .add_program(crate_token::ID, crate_token_data)
        .add_program(arrow_sunny::ID, arrow_sunny_data)
        .add_account(
            fake_arrow.arrow_addr.pubkey(),
            AccountConfig {
                data: fake_arrow.arrow_data,
                owner: arrow_sunny::ID,
                ..Default::default()
            },
        )
        .build()
        .await;

    // Note: decimals were arbitrarily chosen
    env.create_token_mint(&saber_lp_mint, saber_authority.pubkey(), None, 8)
        .await?;
    env.create_token_mint(&cashio_mint, cashio_authority.pubkey(), None, 8)
        .await?;

    /* TODO: Preparation steps
    new crate
    new bank
    mint some Saber LP tokens and Cash
    victim print cash with their Saber LP token (to fill the bank)
    */

    println!("Successfully initialized!");

    // execute PoC
    let hacker_info = HackerInfo {};
    execute_poc(&mut env, hacker_info).await?;

    // TODO: validate PoC

    Ok(())
}

struct HackerInfo {}

async fn execute_poc(env: &mut LocalEnv, hacker_info: HackerInfo) -> Result<(), anyhow::Error> {
    // Write your exploit here
    Ok(())
}
