use cashio_poc::ProgramTestWrapper;

use solana_program_test::{tokio, ProgramTest};
use solana_sdk::signature::Keypair;

#[tokio::main]
async fn main() -> Result<(), anyhow::Error> {
    let program_test = ProgramTest::default();
    let mut env = ProgramTestWrapper::new(program_test).await;

    // prepare mock environment
    let bankman_data = std::fs::read("cashio/target/deploy/bankman.so")?;
    let bankman_keypair = Keypair::new();

    let brrr_data = std::fs::read("cashio/target/deploy/brrr.so")?;
    let brrr_keypair = Keypair::new();

    env.deploy_program(&bankman_keypair, &bankman_data).await?;
    env.deploy_program(&brrr_keypair, &brrr_data).await?;

    // execute PoC
    execute_poc();

    // TODO: validate PoC

    Ok(())
}

fn execute_poc() {
    // Write your exploit here
}
