use cashio_poc::LocalEnvBuilder;

use solana_program_test::tokio;
use solana_sdk::{signature::Keypair, signer::Signer};

#[tokio::main]
async fn main() -> Result<(), anyhow::Error> {
    // prepare mock environment
    let bankman_data = std::fs::read("cashio/target/deploy/bankman.so")?;
    let brrr_data = std::fs::read("cashio/target/deploy/brrr.so")?;
    let crate_token_data = std::fs::read("dep-programs/crate-token-0.6.0.so")?;

    let mut env = LocalEnvBuilder::new()
        .add_program(bankman::ID, bankman_data)
        .add_program(brrr::ID, brrr_data)
        .add_program(crate_token::ID, crate_token_data)
        .build()
        .await;

    let saber_authority = Keypair::new();
    let cashio_authority = Keypair::new();

    let saber_lp_mint = Keypair::new();
    let cashio_mint = Keypair::new();

    // Note: decimals were arbitrarily chosen
    env.create_token_mint(&saber_lp_mint, saber_authority.pubkey(), None, 8)
        .await?;
    env.create_token_mint(&cashio_mint, cashio_authority.pubkey(), None, 8)
        .await?;

    /* TODO: Preparation steps
    new crate
    new bank
    mint some Saber LP tokens and Cash
    victim print cash with their Saber LP token (to fill the bank)
    */

    println!("Successfully initialized!");

    // execute PoC
    execute_poc();

    // TODO: validate PoC

    Ok(())
}

fn execute_poc() {
    // Write your exploit here
}
